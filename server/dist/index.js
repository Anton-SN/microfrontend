"use strict";var M=Object.create;var l=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,R=Object.prototype.hasOwnProperty;var b=(e,r,o,t)=>{if(r&&typeof r=="object"||typeof r=="function")for(let s of j(r))!R.call(e,s)&&s!==o&&l(e,s,{get:()=>r[s],enumerable:!(t=P(r,s))||t.enumerable});return e};var a=(e,r,o)=>(o=e!=null?M(k(e)):{},b(r||!e||!e.__esModule?l(o,"default",{value:e,enumerable:!0}):o,e));var I=a(require("fastify")),x=a(require("mongoose")),O=a(require("dotenv"));var w=a(require("fastify-plugin")),h=a(require("@fastify/jwt")),q=(0,w.default)((e,r,o)=>{e.register(h.default,{secret:process.env.SECRET_KEY}),e.decorate("authenticate",async(t,s)=>{try{await t.jwtVerify()}catch(n){s.send(n)}}),o()}),F=q;var T=a(require("fastify-plugin"));var d=require("mongoose"),g=a(require("bcryptjs")),u=new d.Schema({email:{type:String,required:!0,unique:!0},password:{type:String,required:!0}});u.pre("save",async function(e){let r=this;r.isModified("password")&&(r.password=await g.default.hash(r.password,8)),e()});u.static("findByCredentials",async({email:e,password:r})=>{let o=await p.findOne({email:e});if(!o)throw new Error("Unable to login. Wrong username!");if(!await g.default.compare(r,o.password))throw new Error("Unable to login. Wrong Password!");return o});var p=(0,d.model)("User",u);var S=async(e,r,o)=>{e.post("/signup",async(t,s)=>{try{let{email:n,password:c}=t.body,i=new p({email:n,password:c}),m=e.jwt.sign({email:n},{expiresIn:"15m"}),y=e.jwt.sign({email:n},{expiresIn:"7d"});await i.save(),s.code(201).send({message:"User created successfully",accessToken:m,refreshToken:y})}catch(n){console.error(n),s.code(500).send({message:"Error creating user"})}}),e.post("/login",async(t,s)=>{try{let{email:n,password:c}=t.body,i=await p.findByCredentials({email:n,password:c});if(!i){s.code(401).send("Invalid email or password");return}s.send({user:i})}catch(n){console.error(n),s.code(500).send({message:"Error creating user"})}}),e.post("/auth/refresh",async(t,s)=>{let{refreshToken:n}=t.body;try{let c=e.jwt.verify(n),{email:i}=c,m=e.jwt.sign({email:i},{expiresIn:"15m"}),y=e.jwt.sign({email:i},{expiresIn:"7d"});return s.send({accessToken:m,refreshToken:y})}catch{return s.status(401).send({message:"Invalid token"})}}),o()},E=S;var B=async(e,r,o)=>{e.get("/protected",{onRequest:[e.authenticate]},async t=>(console.info("protected"),t.user)),e.get("/",async(t,s)=>(console.info("home"),s.code(200).send({message:"Home"}),t.user)),o()},v=B;var _=(0,T.default)((e,r,o)=>{e.register(E),e.register(v),o()}),U=_;O.config();var f=(0,I.default)({logger:!1});x.default.connect(process.env.MONGO_URL).then(()=>console.info("MongoDB connected")).catch(e=>console.info("Error connecting to MongoDB:",e));f.register(F);f.register(U);f.get("/ping",async()=>`pong
`);f.listen({port:8080},(e,r)=>{e&&(console.error(e),process.exit(1)),console.info(`Server listening at ${r}`)});
